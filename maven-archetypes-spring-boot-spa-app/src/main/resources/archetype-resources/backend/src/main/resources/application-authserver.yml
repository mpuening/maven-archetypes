#
# MSAL.js requires https protocol, so we enable SSL to support https://localhost:8443
#
# To generate new keystore, run:
#
# mvn -f keystore.xml generate-resources
#
# or
#
# keytool -genkeypair -alias selfsigned -keyalg RSA -keysize 2048 -storetype PKCS12 -keystore selfsigned.p12 -validity 3650
#
server:
  port: 8443
  ssl:
    key-store-type: PKCS12
    key-store: classpath:selfsigned.p12
    key-store-password: storepass
    key-alias: selfsigned

spring:
  ldap:
    embedded:
      base-dn: dc=example,dc=org
      credential:
        username: uid=admin
        password: secret
      ldif: classpath:people.ldif
      port: 8389
      validation:
        enabled: false
  security:
    oauth2:
      authorizationserver:
        client:
          app-client:
            registration:
              client-id: app-client
              client-secret: "{noop}secret1"
              client-authentication-methods:
                - client_secret_basic
                - client_secret_post
                - none
              authorization-grant-types:
                - authorization_code
                - refresh_token
              redirect-uris:
                - http://localhost:4200
                - http://localhost:4200/index.html
                - http://localhost:8080
                - http://localhost:8080/index.html
                - http://localhost:8080/login/oauth2/code/app-client
                - http://localhost:8080/swagger-ui/oauth2-redirect.html
                - https://localhost:8443
                - https://localhost:8443/index.html
                - https://localhost:8443/login/oauth2/code/app-client
                - https://localhost:8443/swagger-ui/oauth2-redirect.html
              post-logout-redirect-uris:
                - https://127.0.0.1:8443/oauth2/logged-out
              scopes:
                - openid
                - offline_access
                - profile
                - Example.Read
            require-authorization-consent: false

      resourceserver:
        jwt:
          jwk-set-uri: https://127.0.0.1:8443/oauth2/jwks
          issuer-uri: https://127.0.0.1:8443
          audiences:
            - app-client

#      client:
#        provider:
#          azure:
#            authorization-uri: ${azure.login-url}/${azure.tenant}/oauth2/v2.0/authorize
#            token-uri: ${azure.login-url}/${azure.tenant}/oauth2/v2.0/token
#            jwk-set-uri: ${azure.login-url}/${azure.tenant}/discovery/v2.0/keys
#          spring:
#            authorization-uri: https://127.0.0.1:8443/oauth2/authorize
#            token-uri: https://127.0.0.1:8433/oauth2/token
#            jwk-set-uri: https://127.0.0.1:8443/oauth2/jwks
#
#        registration:
#          app-client:
#            provider: spring
#            client-name: app-client
#            client-id: app-client
#            client-secret: secret1
#            authorization-grant-type: authorization_code
#            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
#            scope:
#              - openid
#              - profile
#
#azure:
#  tenant: TENANT_ID_GOES_HERE
#  login-url: https://login.microsoftonline.com
#  logout-url: https://login.windows.net/${azure.tenant}/oauth2/logout
#